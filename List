Definition: A list is dynamic **DS** that stores a collection of elements. It allows you to store and manipulate multiple items in a specific order. 
What is it? A list is an ordered collection of elements, where each element has a unique index. Lists can hold items of diffrent *DTs* such as integers, strings or even other lists.
Common Mistakes: #1 (Off-by-one errors) Wheen working with list indices, Indexing starts at 0, not 1. Forgetting this can result in accessing the wrong information. #2 (Modifying the list during iteration: Modifying a list(e.g adding or removing elements) while iterating over it can cause unexpected behaviour. Instead create a copy of List or use techniques like list comprehension instead.
Pros: #1 Storing and organizing collections of related data #2 Sequentially processing and manipulating data #3 Implementing algorithms that require ordered data or manipulating a specific order.
Cons: #1 Constant-time insertions and deletions at arbritrary positions (inefficent) #2 Fast searching or retrieval of elements by value (linear search is required)
Real-Life Use: A shopping list is a real-life example of a list. It contains a sequence of items that need to be purchased and can be modified by adding or removing items.
Code Implementations: 
# Creating a list
my_list = [1, 2, 3, 'apple', 'banana']

# Accessing elements
print(my_list[0])   # Output: 1
print(my_list[3])   # Output: 'apple'

# Modifying elements
my_list[2] = 'orange'
print(my_list)      # Output: [1, 2, 'orange', 'apple', 'banana']

# Adding elements
my_list.append('grape')
print(my_list)      # Output: [1, 2, 'orange', 'apple', 'banana', 'grape']

# Removing elements
my_list.remove('apple')
print(my_list)      # Output: [1, 2, 'orange', 'banana']
